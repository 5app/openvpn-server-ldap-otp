image: docker:stable

variables:
  CONTAINER_IMAGE: gitlab.mgmt.sonet.local:4567/$CI_PROJECT_PATH
  DOCKER_DRIVER: overlay2
  ## Define two new variables based on GitLab's CI/CD predefined variables
  ## https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
  CI_APPLICATION_TAG: $CI_BUILD_REF

stages:
  - build
  - scan
  - release

services:
  - name: docker:stable-dind
    command: ["--insecure-registry=gitlab.mgmt.sonet.local:4567"]

before_script:
  - echo ${CI_BUILD_TOKEN} | docker login gitlab.mgmt.sonet.local:4567 -u gitlab-ci-token --password-stdin

build_image:
  stage: build
  script:
    - docker build -t $CONTAINER_IMAGE:$CI_BUILD_REF .
    - docker push $CONTAINER_IMAGE:$CI_BUILD_REF

container_scanning:
  stage: scan
  before_script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - echo ${CI_BUILD_TOKEN} | docker login gitlab.mgmt.sonet.local:4567 -u gitlab-ci-token --password-stdin
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
  script:
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
  artifacts:
    when: always
    paths:
      - gl-container-scanning-report.json

tag_image:
  stage: release
  script:
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - docker tag ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} ${CI_APPLICATION_REPOSITORY}:latest
    - docker push ${CI_APPLICATION_REPOSITORY}:latest
  only:
    - master

